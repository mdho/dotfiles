" Vundle {{{
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-git'

Plugin 'Lokaltog/vim-easymotion'
Plugin 'scrooloose/nerdtree'
Plugin 'altercation/vim-colors-solarized'

Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

Plugin 'kien/ctrlp.vim' 
Plugin 'ivanov/vim-ipython'

Plugin 'L9'
Plugin 'FuzzyFinder'
Plugin 'Valloric/YouCompleteMe'

" Syntax check for C,C++, fortran and a lot more, \cc comment
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter'

call vundle#end()
filetype plugin indent on
"}}}

" Indenting {{{
    set cindent
    set tabstop=4
    set shiftwidth=4
    set expandtab
    set ruler
" }}}
"
" Colors and Syntax {{{
set nu
syntax enable
set background=dark
set t_Co=16
colo solarized
" }}}

" UltiSnips/YCM fix{{{
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsJumpForwardTrigger="<c-j>"
    let g:UltiSnipsJumpBackwardTrigger="<c-k>"
    let g:UltiSnipsListSnippets="<c-tab>"
" }}}

" YCM settings: {{{
let g:ycm_autoclose_preview_window_after_completion=1
" }}}

" General Keybinds: {{{
map <f6> <esc>:NERDTreeToggle<cr>
nnoremap <leader>bb :buffers<cr>:b<space>
nnoremap <space> za
" }}}

" NERDTree close when no active buffer: {{{
autocmd WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction
" }}}

" Syntax within syntax {{{
function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
  let ft=toupper(a:filetype)
  let group='textGroup'.ft
  if exists('b:current_syntax')
    let s:current_syntax=b:current_syntax
    " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
    " do nothing if b:current_syntax is defined.
    unlet b:current_syntax
  endif
  execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
  try
    execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
  catch
  endtry
  if exists('s:current_syntax')
    let b:current_syntax=s:current_syntax
  else
    unlet b:current_syntax
  endif
  execute 'syntax region textSnip'.ft.' matchgroup='.a:textSnipHl.' start="'.a:start.'" end="'.a:end.'" contains=@'.group
endfunction
"}}}

au BufNewFile,BufRead *.tikz set filetype=tex
